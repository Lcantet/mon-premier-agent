#!/usr/bin/env python3
"""
Agent conversationnel utilisant Google Gemini AI.
Cet agent maintient l'historique de conversation et permet une interaction en ligne de commande.
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv


def main():
    """Point d'entr√©e principal de l'agent conversationnel."""
    # Charger les variables d'environnement depuis le fichier .env
    load_dotenv()
    
    # R√©cup√©rer la cl√© API
    api_key = os.getenv('GOOGLE_API_KEY')
    
    if not api_key:
        print("‚ùå Erreur: GOOGLE_API_KEY non trouv√©e dans le fichier .env")
        print("Veuillez cr√©er un fichier .env avec votre cl√© API Google.")
        return
    
    # Configurer l'API Google Generative AI
    genai.configure(api_key=api_key)
    
    # Initialiser le mod√®le Gemini
    model = genai.GenerativeModel('gemini-pro')
    
    # D√©marrer une session de chat avec historique
    chat = model.start_chat(history=[])
    
    print("="*60)
    print("ü§ñ Agent Conversationnel Gemini")
    print("="*60)
    print("Tapez 'quit' ou 'exit' pour quitter.")
    print("="*60)
    print()
    
    # Boucle de conversation
    while True:
        try:
            # Obtenir l'entr√©e utilisateur
            user_input = input("Vous: ").strip()
            
            # V√©rifier si l'utilisateur veut quitter
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("\nüëã Au revoir !")
                break
            
            # Ignorer les entr√©es vides
            if not user_input:
                continue
            
            # Envoyer le message et obtenir la r√©ponse
            print("\nü§ñ Agent: ", end="", flush=True)
            response = chat.send_message(user_input)
            print(response.text)
            print()
            
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir !")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
            print("Veuillez r√©essayer.\n")


if __name__ == "__main__":
    main()
